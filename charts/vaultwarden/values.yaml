image:
  registry: docker.io
  repository: vaultwarden/server
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

fullnameOverride: ""

podAnnotations: {}

podLabels: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

initContainers: []

sidecars: []

nodeSelector: {}

affinity: {}

tolerations: []

statefulsetlabels: {}


vaultwarden:
  general:
    webVaultEnabled: "true"
    rocket:
      port: "8080"
      workers: "10"
    websocket:
      enabled: true
      address: "0.0.0.0"
      port: 3012
    config:
      domain:
  security:
    adminToken:
      value: ""
      existingSecret: 
        name: ""
        key: ""
    config:
        signupsAllowed: true
        invitationsAllowed: true
        signupDomains: "contoso.com"
        signupsVerify: "true"
        showPassHint: "false"
  smtp:
    username: ""
    password: ""
    existingSecret: 
      # Name of an existing secret containing the SMTP username and password.
      name: ""
      username:
          secretKey: ""
      password:
          secretKey: ""
    config:
      host: ""
      security: "starttls"
      port: 25
      from: ""
      fromName: ""
      authMechanism: "Plain"
      acceptInvalidHostnames: "false"
      acceptInvalidCerts: "false"
      debug: false
  database:
    type: "default"
    host: ""
    port: ""
    username: ""
    password: ""
    dbName: ""
    uriOverride: ""
    existingSecret: ""
    existingSecretKey: ""
    connectionRetries: 15
    maxConnections: 10
  storage:
    enabled: true
    size: "15Gi"
    class: ""
    dataDir: "/data"
  logging:
    config: {}
      # logfile: "/data/vaultwarden.log"
      # loglevel: "warn"
